#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Сборка
"""

import os
import sys
PATH_TO_SOURCE = os.path.abspath(os.path.dirname(__file__))
PATH_TO_ROOT = os.path.join(PATH_TO_SOURCE, '..', '..', '..')

sys.path.insert(0, os.path.abspath(PATH_TO_ROOT))

# ######################################################################################################################
# Импорт необходимых инструментов
# ######################################################################################################################
# Подавление Warning
import warnings
for warn in [UserWarning, FutureWarning]: warnings.filterwarnings('ignore', category = warn)

from dataclasses import dataclass # Класс данных

# Персональные
from test_docs_python.modules.core.core import Core # Ядро модулей

# ######################################################################################################################
# Сборка
# ######################################################################################################################
@dataclass
class Run(Core):
    """Класс для сборки библиотеки"""

    # ------------------------------------------------------------------------------------------------------------------
    # Конструктор
    # ------------------------------------------------------------------------------------------------------------------

    def __post_init__(self):
        super().__post_init__() # Выполнение конструктора из суперкласса

    # ------------------------------------------------------------------------------------------------------------------
    #  Внешние методы
    # ------------------------------------------------------------------------------------------------------------------

    def run(self, out: bool = True) -> bool:
        """Запуск

        Args:
            out (bool): Печатать процесс выполнения

        Returns:
             bool: **True** если запуск прошел успешно, в обратном случае **False**
        """

        # Проверка аргументов
        if type(out) is not bool: self.inv_args(__class__.__name__, self.run.__name__, out = out); return False

        # Версии установленных библиотек
        if out is True: self.libs_vers(out = out)

        return True

def main():
    # Запуск детектирования речевой активности в аудиовизуальном сигнале
    run = Run(lang = 'ru')
    run.run()


if __name__ == "__main__":
    main()